From 2961af73e8003cff1e6a0d19ca4d7686bd1038a5 Mon Sep 17 00:00:00 2001
From: iskandar1023 <iiiiskandar14@gmail.com>
Date: Tue, 3 May 2016 20:45:57 +0700
Subject: [PATCH] Revert commits for CM compatibility

Revert "Use iphone 5 gamma profile"

This reverts commit 0564f06a7f118089e300a7be0f8bb35cdb98b379.

Revert "mako: gamma_adjustments: add extensive control over the display gamma curve."

This reverts commit a9c01fe5a0e8191ae3c978ee81e76abb1906a8b5.

Revert "mako: display: fix RGB values to be reset each screen on/off."

This reverts commit bce52c12c0a37cf33dce2a1aa06edd17f1f47823.

Revert "Revert "Support for faux123 gamma control""

This reverts commit bd393e48bbe4acdba1ac1a73d4710e4219f4fee6.

Revert "Revert "LG Mako gamma control - add mirror interface while leaving""

This reverts commit c9a2491d8c19988434211078fd12ae95c8140d25.

Revert "Revert "Gamma Control - added refresh_screen sysfs attribute that has nothing to""

This reverts commit c7dd4a9f4dd7e6ae61ad27d2d32aba8d32400c25.
---
 arch/arm/mach-msm/lge/mako/board-mako-display.c |   2 +-
 drivers/misc/Kconfig                            |   7 -
 drivers/misc/Makefile                           |   1 -
 drivers/misc/gamma_control.c                    | 493 ------------------------
 drivers/video/msm/mipi_dsi.h                    |   2 -
 drivers/video/msm/mipi_lgit.c                   | 454 +++++++++++++++++++---
 scripts/gcc-wrapper.py                          |   1 +
 7 files changed, 404 insertions(+), 556 deletions(-)
 delete mode 100644 drivers/misc/gamma_control.c

diff --git a/arch/arm/mach-msm/lge/mako/board-mako-display.c b/arch/arm/mach-msm/lge/mako/board-mako-display.c
index c2aced8..550ba24 100644
--- a/arch/arm/mach-msm/lge/mako/board-mako-display.c
+++ b/arch/arm/mach-msm/lge/mako/board-mako-display.c
@@ -297,7 +297,7 @@ static int kcal_get_values(int *kcal_r, int *kcal_g, int *kcal_b)
 	return 0;
 }
 
-int kcal_refresh_values()
+static int kcal_refresh_values(void)
 {
 	return update_preset_lcdc_lut();
 }
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index ce8be2f..e155019 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -4,13 +4,6 @@
 
 menu "Misc devices"
 
-config GAMMA_CONTROL
-	tristate "Mako Gamma Control"
-	default y
-	help
-	  This adds full support for Gamma screen tweaking on
-	  Mako.
-	  
 config SENSORS_LIS3LV02D
 	tristate
 	depends on INPUT
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 7e4c7da..439e43d 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -73,4 +73,3 @@ obj-y += tspdrv/
 obj-$(CONFIG_BU52031NVX) += pm8xxx-cradle.o
 obj-$(CONFIG_SLIMPORT_ANX7808)	+= slimport_anx7808/
 obj-$(CONFIG_UID_CPUTIME) += uid_cputime.o
-obj-$(CONFIG_GAMMA_CONTROL) += gamma_control.o
diff --git a/drivers/misc/gamma_control.c b/drivers/misc/gamma_control.c
deleted file mode 100644
index e4d1c0f..0000000
--- a/drivers/misc/gamma_control.c
+++ /dev/null
@@ -1,493 +0,0 @@
-/*
- * Copyright 2013 Francisco Franco
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-#include <linux/init.h>
-#include <linux/device.h>
-#include <linux/miscdevice.h>
-
-#define GAMMACONTROL_VERSION 3
-
-/*
- * Update function callback into the display driver
- * @type: if its RED, GREEN or BLUE
- * @array_pos: index of the array to be changed with the new value
- * @val: value that is going to be writen into the array and then
- * 		 pushed to the display diver
- */
-extern void update_vals(int type, int array_pos, int val);
-
-/*
- * Whites for RED, GREEN and BLUE
- */
-unsigned int red_whites_val = 0;
-unsigned int green_whites_val = 0;
-unsigned int blue_whites_val = 0;
-
-/*
- * Grays for RED, GREEN and BLUE
- */
-unsigned int red_greys_val = 0;
-unsigned int green_greys_val = 0;
-unsigned int blue_greys_val = 0;
-
-/*
- * Mids for RED, GREEN and BLUE
- */
-unsigned int red_mids_val = 39;
-unsigned int green_mids_val = 39;
-unsigned int blue_mids_val = 39;
-
-/*
- * Blacks for RED, GREEN and BLUE
- */
-unsigned int red_blacks_val = 119;
-unsigned int green_blacks_val = 119;
-unsigned int blue_blacks_val = 119;
-
-/*
- * These values are common to the RGB spectrum in this implementation
- */
-unsigned int contrast_val = 6;
-unsigned int brightness_val = 0;
-unsigned int saturation_val = 2;
-
-/*
- * Sysfs get/set entries
- */
-
-static ssize_t red_whites_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", red_whites_val);
-}
-
-static ssize_t red_whites_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != red_whites_val) {
-		pr_info("New RED whites: %d\n", new_val);
-		red_whites_val = new_val;
-		update_vals(1, 8, red_whites_val);
-	}
-
-    return size;
-}
-
-static ssize_t green_whites_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", green_whites_val);
-}
-
-static ssize_t green_whites_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != green_whites_val) {
-		pr_info("New GREEN whites: %d\n", new_val);
-		green_whites_val = new_val;
-		update_vals(2, 8, green_whites_val);
-	}
-
-    return size;
-}
-
-static ssize_t blue_whites_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", blue_whites_val);
-}
-
-static ssize_t blue_whites_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != blue_whites_val) {
-		pr_info("New BLUE whites: %d\n", new_val);
-		blue_whites_val = new_val;
-		update_vals(3, 8, blue_whites_val);
-	}
-
-    return size;
-}
-
-static ssize_t red_greys_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", red_greys_val);
-}
-
-static ssize_t red_greys_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != red_greys_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-			
-		pr_info("New RED grays: %d\n", new_val);
-		red_greys_val = new_val;
-		update_vals(1, 1, red_greys_val);
-	}
-
-    return size;
-}
-
-static ssize_t green_greys_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", green_greys_val);
-}
-
-static ssize_t green_greys_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != green_greys_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-			
-		pr_info("New GREEN grays: %d\n", new_val);
-		green_greys_val = new_val;
-		update_vals(2, 1, green_greys_val);
-	}
-
-    return size;
-}
-
-static ssize_t blue_greys_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", blue_greys_val);
-}
-
-static ssize_t blue_greys_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != blue_greys_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-			
-		pr_info("New RED grays: %d\n", new_val);
-		blue_greys_val = new_val;
-		update_vals(3, 1, blue_greys_val);
-	}
-
-    return size;
-}
-
-static ssize_t red_mids_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", red_mids_val);
-}
-
-static ssize_t red_mids_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != red_mids_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New RED mids: %d\n", new_val);
-		red_mids_val = new_val;
-		update_vals(1, 2, red_mids_val);
-	}
-
-    return size;
-}
-
-static ssize_t green_mids_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", green_mids_val);
-}
-
-static ssize_t green_mids_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != green_mids_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New GREEN mids: %d\n", new_val);
-		green_mids_val = new_val;
-		update_vals(2, 2, green_mids_val);
-	}
-
-    return size;
-}
-
-static ssize_t blue_mids_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", blue_mids_val);
-}
-
-static ssize_t blue_mids_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != blue_mids_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New BLUE mids: %d\n", new_val);
-		blue_mids_val = new_val;
-		update_vals(3, 2, blue_mids_val);
-	}
-
-    return size;
-}
-
-static ssize_t red_blacks_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", red_blacks_val);
-}
-
-static ssize_t red_blacks_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != red_blacks_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New RED blacks: %d\n", new_val);
-		red_blacks_val = new_val;
-		update_vals(1, 3, red_blacks_val);
-	}
-
-    return size;
-}
-
-static ssize_t green_blacks_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", green_blacks_val);
-}
-
-static ssize_t green_blacks_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != green_blacks_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New GREEN blacks: %d\n", new_val);
-		green_blacks_val = new_val;
-		update_vals(2, 3, green_blacks_val);
-	}
-
-    return size;
-}
-
-static ssize_t blue_blacks_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", blue_blacks_val);
-}
-
-static ssize_t blue_blacks_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != blue_blacks_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New BLUE blacks: %d\n", new_val);
-		blue_blacks_val = new_val;
-		update_vals(3, 3, blue_blacks_val);
-	}
-
-    return size;
-}
-
-static ssize_t contrast_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", contrast_val);
-}
-
-static ssize_t contrast_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != contrast_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 31)
-			new_val = 31;
-		pr_info("New contrast: %d\n", new_val);
-		contrast_val = new_val;
-		update_vals(5, 0, contrast_val);
-	}
-
-    return size;
-}
-
-static ssize_t brightness_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", brightness_val);
-}
-
-static ssize_t brightness_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != brightness_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 31)
-			new_val = 31;
-		pr_info("New brightness: %d\n", new_val);
-		brightness_val = new_val;
-		update_vals(6, 0, brightness_val);
-	}
-
-    return size;
-}
-
-static ssize_t saturation_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-    return sprintf(buf, "%d\n", saturation_val);
-}
-
-static ssize_t saturation_store(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
-{
-    int new_val;
-
-	sscanf(buf, "%d", &new_val);
-
-	if (new_val != saturation_val) {
-		if (new_val < 0)
-			new_val = 0;
-		else if (new_val > 255)
-			new_val = 255;
-		pr_info("New saturation: %d\n", new_val);
-		saturation_val = new_val;
-		update_vals(7, 0, saturation_val);
-	}
-
-    return size;
-}
-
-static ssize_t gammacontrol_version(struct device * dev, struct device_attribute * attr, char * buf)
-{
-    return sprintf(buf, "%u\n", GAMMACONTROL_VERSION);
-}
-
-static DEVICE_ATTR(red_whites, 0777, red_whites_show, red_whites_store);
-static DEVICE_ATTR(green_whites, 0777, green_whites_show, green_whites_store);
-static DEVICE_ATTR(blue_whites, 0777, blue_whites_show, blue_whites_store);
-
-static DEVICE_ATTR(red_greys, 0777, red_greys_show, red_greys_store);
-static DEVICE_ATTR(green_greys, 0777, green_greys_show, green_greys_store);
-static DEVICE_ATTR(blue_greys, 0777, blue_greys_show, blue_greys_store);
-
-static DEVICE_ATTR(red_mids, 0777, red_mids_show, red_mids_store);
-static DEVICE_ATTR(green_mids, 0777, green_mids_show, green_mids_store);
-static DEVICE_ATTR(blue_mids, 0777, blue_mids_show, blue_mids_store);
-
-static DEVICE_ATTR(red_blacks, 0777, red_blacks_show, red_blacks_store);
-static DEVICE_ATTR(green_blacks, 0777, green_blacks_show, green_blacks_store);
-static DEVICE_ATTR(blue_blacks, 0777, blue_blacks_show, blue_blacks_store);
-
-static DEVICE_ATTR(contrast, 0777, contrast_show, contrast_store);
-static DEVICE_ATTR(brightness, 0777, brightness_show, brightness_store);
-static DEVICE_ATTR(saturation, 0777, saturation_show, saturation_store);
-
-static DEVICE_ATTR(version, 0777 , gammacontrol_version, NULL);
-
-static struct attribute *gammacontrol_attributes[] = 
-{
-	&dev_attr_red_whites.attr,
-	&dev_attr_green_whites.attr,
-	&dev_attr_blue_whites.attr,
-	&dev_attr_red_greys.attr,
-	&dev_attr_green_greys.attr,
-	&dev_attr_blue_greys.attr,
-	&dev_attr_red_mids.attr,
-	&dev_attr_green_mids.attr,
-	&dev_attr_blue_mids.attr,
-	&dev_attr_red_blacks.attr,
-	&dev_attr_green_blacks.attr,
-	&dev_attr_blue_blacks.attr,
-	&dev_attr_contrast.attr,
-	&dev_attr_brightness.attr,
-	&dev_attr_saturation.attr,
-	&dev_attr_version.attr,
-	NULL
-};
-
-static struct attribute_group gammacontrol_group = 
-{
-	.attrs  = gammacontrol_attributes,
-};
-
-static struct miscdevice gammacontrol_device = 
-{
-	.minor = MISC_DYNAMIC_MINOR,
-	.name = "gammacontrol",
-};
-
-static int __init gammacontrol_init(void)
-{
-    int ret;
-
-    pr_info("%s misc_register(%s)\n", __FUNCTION__, gammacontrol_device.name);
-
-    ret = misc_register(&gammacontrol_device);
-
-    if (ret) {
-	    pr_err("%s misc_register(%s) fail\n", __FUNCTION__, gammacontrol_device.name);
-	    return 1;
-	}
-
-    if (sysfs_create_group(&gammacontrol_device.this_device->kobj, &gammacontrol_group) < 0) {
-	    pr_err("%s sysfs_create_group fail\n", __FUNCTION__);
-	    pr_err("Failed to create sysfs group for device (%s)!\n", gammacontrol_device.name);
-	}
-
-    return 0;
-}
-late_initcall(gammacontrol_init);
diff --git a/drivers/video/msm/mipi_dsi.h b/drivers/video/msm/mipi_dsi.h
index 9815a25..223ec58 100644
--- a/drivers/video/msm/mipi_dsi.h
+++ b/drivers/video/msm/mipi_dsi.h
@@ -379,8 +379,6 @@ void mipi_dsi_cmd_mdp_busy(void);
 void mipi_dsi_configure_fb_divider(u32 fps_level);
 void mipi_dsi_wait4video_done(void);
 
-extern int kcal_refresh_values(void);
-
 #ifdef CONFIG_FB_MSM_MDP303
 void update_lane_config(struct msm_panel_info *pinfo);
 #endif
diff --git a/drivers/video/msm/mipi_lgit.c b/drivers/video/msm/mipi_lgit.c
index f8f2747..9ecd698 100644
--- a/drivers/video/msm/mipi_lgit.c
+++ b/drivers/video/msm/mipi_lgit.c
@@ -17,6 +17,7 @@
  * 02110-1301, USA.
  *
  */
+#include <linux/string.h>
 #include <linux/gpio.h>
 #include <linux/syscore_ops.h>
 
@@ -32,9 +33,7 @@ static struct dsi_buf lgit_rx_buf;
 static struct msm_fb_data_type *local_mfd;
 static int skip_init;
 
-#ifdef CONFIG_GAMMA_CONTROL
 struct dsi_cmd_desc new_color_vals[33];
-#endif
 
 #define DSV_ONBST 57
 
@@ -82,15 +81,9 @@ static int mipi_lgit_lcd_on(struct platform_device *pdev)
 		return -EINVAL;
 
 	MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x10000000);
-#ifdef CONFIG_GAMMA_CONTROL
 	ret = mipi_dsi_cmds_tx(&lgit_tx_buf,
-		new_color_vals,
-		mipi_lgit_pdata->power_on_set_size_1);
-#else
-	ret = mipi_dsi_cmds_tx(&lgit_tx_buf,
-		mipi_lgit_pdata->power_on_set_1,
-		mipi_lgit_pdata->power_on_set_size_1);
-#endif
+			new_color_vals,
+			mipi_lgit_pdata->power_on_set_size_1);
 	MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x14000000);
 	if (ret < 0) {
 		pr_err("%s: failed to transmit power_on_set_1 cmds\n", __func__);
@@ -126,7 +119,6 @@ static int mipi_lgit_lcd_on(struct platform_device *pdev)
 		return ret;
 	}
 
-	kcal_refresh_values();
 	pr_info("%s finished\n", __func__);
 	return 0;
 }
@@ -228,52 +220,380 @@ static void mipi_lgit_set_backlight_board(struct msm_fb_data_type *mfd)
 	mipi_lgit_pdata->backlight_level(level, 0, 0);
 }
 
-#ifdef CONFIG_GAMMA_CONTROL
+/******************* begin faux123 sysfs interface *******************/
+static bool calc_checksum(int intArr[]) {
+	int i = 0;
+	unsigned char chksum = 0;
+
+	if (intArr[5] > 31 || (intArr[6] > 31)) {
+		pr_info("gamma 0 and gamma 1 values can't be over 31, got %d %d instead!", intArr[5], intArr[6]);
+		return false;
+	}
+
+	for (i=1; i<10; i++) {
+		if (intArr[i] > 255) {
+			pr_info("color values  can't be over 255, got %d instead!", intArr[i]);
+			return false;
+		}
+		chksum += intArr[i];
+	}
+
+	if (chksum == (unsigned char)intArr[0]) {
+		return true;
+	} else {
+		pr_info("expecting %d, got %d instead!", chksum, intArr[0]);
+		return false;
+	}
+}
+
+static ssize_t kgamma_r_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (calc_checksum(kgamma)) {
+		kgamma[0] = 0xd0;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_r_p [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[5].payload[i] = kgamma[i];
+		}
+
+		kgamma[0] = 0xd1;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_r_n [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[6].payload[i] = kgamma[i];
+		}
+	}
+	return count;
+}
+
+static ssize_t kgamma_r_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	int kgamma[10];
+	int i;
+
+	for (i=0; i<10; i++)
+		kgamma[i] = new_color_vals[5].payload[i];
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d", 
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
+}
+
+static ssize_t kgamma_g_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (calc_checksum(kgamma)) {
+		kgamma[0] = 0xd2;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_g_p [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[7].payload[i] = kgamma[i];
+		}
+
+		kgamma[0] = 0xd3;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_g_n [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[8].payload[i] = kgamma[i];
+		}
+	}
+	return count;
+}
+
+static ssize_t kgamma_g_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	int kgamma[10];
+	int i;
+
+	for (i=0; i<10; i++)
+		kgamma[i] = new_color_vals[7].payload[i];
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d", 
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
+}
+
+static ssize_t kgamma_b_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (calc_checksum(kgamma)) {
+		kgamma[0] = 0xd4;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_b_p [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[9].payload[i] = kgamma[i];
+		}
+
+		kgamma[0] = 0xd5;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_b_n [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[10].payload[i] = kgamma[i];
+		}
+	}
+	return count;
+}
+
+static ssize_t kgamma_b_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	int kgamma[10];
+	int i;
+
+	for (i=0; i<10; i++)
+		kgamma[i] = new_color_vals[9].payload[i];
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d", 
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
+}
+
+static ssize_t kgamma_ctrl_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	pr_info("kgamma_ctrl count: %d\n", count);
+	return count;
+}
+
+static ssize_t kgamma_ctrl_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	return 0;
+}
+
+static DEVICE_ATTR(kgamma_r, 0644, kgamma_r_show, kgamma_r_store);
+static DEVICE_ATTR(kgamma_g, 0644, kgamma_g_show, kgamma_g_store);
+static DEVICE_ATTR(kgamma_b, 0644, kgamma_b_show, kgamma_b_store);
+static DEVICE_ATTR(kgamma_ctrl, 0644, kgamma_ctrl_show, kgamma_ctrl_store);
+/******************* end faux123 sysfs interface *******************/
+
+/******************* motley sysfs interface ********************/
+
+/** check for for reasonable values and ones that are too large for the
+ * destination char data type
+ * */
+static bool calc_checksum_generic(unsigned int intArr[]) {
+	int i = 0;
+	unsigned int chksum = 0;
+
+	if (intArr[5] > 31 || (intArr[6] > 31)) {
+		pr_info("gamma 0 and gamma 1 values can't be over 31, got %d %d instead!", intArr[5], intArr[6]);
+		return false;
+	}
+
+	for (i=1; i<10; i++) {
+		if (intArr[i] > 255) {
+			pr_info("char values  can't be over 255, got %d instead!", intArr[i]);
+			return false;
+		}
+		chksum += intArr[i];
+	}
+
+	if (chksum == intArr[0]) {
+		return true;
+	} else {
+		pr_info("expecting %d, got %d instead!", chksum, intArr[0]);
+		return false;
+	}
+}
+
+static ssize_t kgamma_red_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	unsigned int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (calc_checksum_generic(kgamma)) {
+		kgamma[0] = 0xd0;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_r_p [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[5].payload[i] = (char)kgamma[i];
+		}
 
-#define RED 1
-#define GREEN 2
-#define BLUE 3
-#define CONTRAST 5
-#define BRIGHTNESS 6
-#define SATURATION 7
+		kgamma[0] = 0xd1;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_r_n [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[6].payload[i] = (char)kgamma[i];
+		}
+	}
+	return count;
+}
 
-void update_vals(int type, int array_pos, int val)
+static ssize_t kgamma_red_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
 {
+	unsigned int kgamma[10];
 	int i;
+	unsigned int check_sum =0;
 
-	switch(type) {
-		case RED:
-			new_color_vals[5].payload[array_pos] = val;
-			new_color_vals[6].payload[array_pos] = val;
-			break;
-		case GREEN:
-			new_color_vals[7].payload[array_pos] = val;
-			new_color_vals[8].payload[array_pos] = val;
-			break;
-		case BLUE:
-			new_color_vals[9].payload[array_pos] = val;
-			new_color_vals[10].payload[array_pos] = val;
-			break;
-		case CONTRAST:
-			for (i = 5; i <= 10; i++)
-				new_color_vals[i].payload[type] = val;
-			break;
-		case BRIGHTNESS:
-			for (i = 5; i <= 10; i++)
-				new_color_vals[i].payload[type] = val;
-			break;
-		case SATURATION:
-			for (i = 5; i <= 10; i++)
-				new_color_vals[i].payload[type] = val;
-			break;
-		default:
-			pr_info("%s - Wrong value - abort.\n", __FUNCTION__);
-			return;
+	for (i=1; i<10; i++) {
+		kgamma[i] = (unsigned int)new_color_vals[5].payload[i];
+		check_sum += kgamma[i];
 	}
 
-	pr_info("%s - Updating display GAMMA settings.\n", __FUNCTION__);
+	kgamma[0] = check_sum;
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
 }
-#endif
+
+static ssize_t kgamma_green_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	unsigned int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (calc_checksum_generic(kgamma)) {
+		kgamma[0] = 0xd2;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_g_p [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[7].payload[i] = (char)kgamma[i];
+		}
+
+		kgamma[0] = 0xd3;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_g_n [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[8].payload[i] = (char)kgamma[i];
+		}
+	}
+	return count;
+}
+
+static ssize_t kgamma_green_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	unsigned int kgamma[10];
+	int i;
+	unsigned int check_sum =0;
+
+	for (i=1; i<10; i++) {
+		kgamma[i] = (unsigned int)new_color_vals[7].payload[i];
+		check_sum += kgamma[i];
+	}
+
+	kgamma[0] = check_sum;
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
+}
+
+static ssize_t kgamma_blue_store(struct device *dev, struct device_attribute *attr,
+						const char *buf, size_t count)
+{
+	unsigned int kgamma[10];
+	int i;
+
+	sscanf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		&kgamma[0], &kgamma[1], &kgamma[2], &kgamma[3],
+		&kgamma[4], &kgamma[5], &kgamma[6], &kgamma[7],
+		&kgamma[8], &kgamma[9]);
+
+	if (calc_checksum_generic(kgamma)) {
+		kgamma[0] = 0xd4;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_b_p [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[9].payload[i] = (char)kgamma[i];
+		}
+
+		kgamma[0] = 0xd5;
+		for (i=0; i<10; i++) {
+			pr_info("kgamma_b_n [%d] => %d \n", i, kgamma[i]);
+			new_color_vals[10].payload[i] = (char)kgamma[i];
+		}
+	}
+	return count;
+}
+
+static ssize_t kgamma_blue_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	unsigned int kgamma[10];
+	int i;
+	unsigned int check_sum =0;
+
+	for (i=1; i<10; i++) {
+		kgamma[i] = (unsigned int)new_color_vals[9].payload[i];
+		check_sum += kgamma[i];
+	}
+
+	kgamma[0] = check_sum;
+
+	return sprintf(buf, "%d %d %d %d %d %d %d %d %d %d",
+		kgamma[0], kgamma[1], kgamma[2], kgamma[3],
+		kgamma[4], kgamma[5], kgamma[6], kgamma[7],
+		kgamma[8], kgamma[9]);
+}
+
+static ssize_t refresh_screen_go (struct device *dev, struct device_attribute *attr,
+                        const char *buf, size_t count) {
+
+	unsigned int i = 0;
+	int ret = 0;
+
+	sscanf(buf, "%i", &i);
+	if (i == 1) {
+		msleep(20);
+		MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x10000000);
+		ret = mipi_dsi_cmds_tx(&lgit_tx_buf,
+				new_color_vals,
+					mipi_lgit_pdata->power_on_set_size_1);
+			MIPI_OUTP(MIPI_DSI_BASE + 0x38, 0x14000000);
+			if (ret < 0)
+				pr_err("%s: failed to transmit power_on_set_1 cmds\n", __func__);
+	}
+    
+    return count;
+}
+
+static ssize_t refresh_screen_show(struct device *dev, struct device_attribute *attr,
+								char *buf)
+{
+	return sprintf(buf, "%d", 0);
+}
+
+static DEVICE_ATTR(kgamma_red, 0644, kgamma_red_show, kgamma_red_store);
+static DEVICE_ATTR(kgamma_green, 0644, kgamma_green_show, kgamma_green_store);
+static DEVICE_ATTR(kgamma_blue, 0644, kgamma_blue_show, kgamma_blue_store);
+static DEVICE_ATTR(refresh_screen, 0644, refresh_screen_show, refresh_screen_go);
+/******************* end motley sysfs interface ********************/
 
 struct syscore_ops panel_syscore_ops = {
 	.shutdown = mipi_lgit_lcd_shutdown,
@@ -281,14 +601,16 @@ struct syscore_ops panel_syscore_ops = {
 
 static int mipi_lgit_lcd_probe(struct platform_device *pdev)
 {
+	int rc;
+
 	if (pdev->id == 0) {
 		mipi_lgit_pdata = pdev->dev.platform_data;
 		return 0;
 	}
 
-#ifdef CONFIG_GAMMA_CONTROL
-	memcpy((void *) new_color_vals, (void *) mipi_lgit_pdata->power_on_set_1, sizeof(new_color_vals));
-#endif
+	// make a copy of platform data
+	memcpy((void*)new_color_vals, (void*)mipi_lgit_pdata->power_on_set_1,
+		sizeof(new_color_vals));
 
 	pr_info("%s start\n", __func__);
 
@@ -296,6 +618,34 @@ static int mipi_lgit_lcd_probe(struct platform_device *pdev)
 	msm_fb_add_device(pdev);
 
 	register_syscore_ops(&panel_syscore_ops);
+	
+	/* faux123 gamma control */
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_r);
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_g);
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_b);
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_ctrl);
+
+	/* motley interface */
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_red);
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_green);
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_kgamma_blue);
+	if(rc !=0)
+		return -1;
+	rc = device_create_file(&pdev->dev, &dev_attr_refresh_screen);
+	if(rc !=0)
+		return -1;
 
 	return 0;
 }
diff --git a/scripts/gcc-wrapper.py b/scripts/gcc-wrapper.py
index 27e76a7..26626ca 100755
--- a/scripts/gcc-wrapper.py
+++ b/scripts/gcc-wrapper.py
@@ -43,6 +43,7 @@ allowed_warnings = set([
     "alignment.c:327",
     "mmu.c:602",
     "return_address.c:62",
+    "mipi_lgit.c:600",
  ])
 
 # Capture the name of the object file, can find it.
-- 
2.8.2

